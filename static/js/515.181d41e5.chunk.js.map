{"version":3,"file":"static/js/515.181d41e5.chunk.js","mappings":"yMAmBA,EAjBiB,SAAC,GAAa,IAAZA,EAAW,EAAXA,MAGf,OAAQ,wBACHA,EAAMC,KAAI,YAA0D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACjD,OAAQ,2BACF,gBACLC,IAAG,yCAAoCJ,GACvCK,IAAKJ,GAAiBC,KAEjB,uBAAID,GAAiBC,KACrB,uCAAeC,OANJJ,EAQnB,KAER,E,2BCUD,EAtBa,WACT,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAcU,EAAd,KACMC,GAASC,EAAAA,EAAAA,MAWf,OARAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,eAAcH,EAAOI,SAChBC,MAAK,SAAAC,GAAI,OAAIP,EAASO,EAAKA,KAAlB,IACbC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAME,eAAxB,GACf,GAAC,CAACV,EAAOI,WAKN,+BACsB,IAAjBf,EAAMsB,SAAgB,kEACtBtB,EAAMsB,OAAS,IAAK,SAAC,EAAD,CAAUtB,MAAOA,MAIjD,C,8NCzBD,IAAMuB,EAAW,gCACXC,EAAM,mCAECC,EAAoB,SAACC,GAC9B,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,sCAA0CC,IACjDR,MAAK,SAAAY,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GAER,EAEYC,EAAkB,SAACC,GAC5B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,oBAAwCT,IAC/CR,MAAK,SAAAY,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYjB,EAAgB,SAACmB,GAC1B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,4BAAgDT,IACvDR,MAAK,SAAAY,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYG,EAAkB,SAACD,GAC5B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,4BAAgDT,IACvDR,MAAK,SAAAY,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYI,EAAiB,SAACC,GAC3B,OAAOT,MAAM,GAAD,OAAIJ,EAAJ,gCAAoCC,EAApC,kBAAiDY,IACxDpB,MAAK,SAAAY,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,C","sources":["components/CastList/CastList.jsx","pages/Cast.js","services/MoviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst CastList = ({casts}) => {\n\n\n    return (<ul>\n        {casts.map(({id, profile_path, original_name, name, character }) => {\n           return( <li key={id}>\n                 <img\n            src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n            alt={original_name || name}\n                />\n                 <p>{original_name || name}</p>\n                 <p>Chatacter: {character}</p>\n            </li>)\n        })}\n    </ul>)\n}\n\nexport default CastList;\n\nCastList.propTypes = {\n  casts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_name: PropTypes.string,\n      name: PropTypes.string,\n      caches: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};","import CastList from \"components/CastList/CastList\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getCastsMovie } from \"services/MoviesAPI\";\n\nconst Cast = () => {\n    const [casts, setCasts] = useState([]);\n    const params = useParams();\n\n\n    useEffect(() => {\n        getCastsMovie(params.movieId)\n            .then(cast => setCasts(cast.cast))\n        .catch(error => console.error(error.status_message))\n    },[params.movieId])\n    \n\n\n    return (\n        <section>\n            {casts.length === 0 && <strong>We dont have casts for this movie</strong>}\n            {casts.length > 0 && <CastList casts={casts} />}\n    </section>\n  );\n\n}\n\nexport default Cast;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '9aeb3f25134c39d746b22e1322fdcd2c';\n\nexport const getTrendingMovies = (movies) => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n       \n}\n\nexport const getDetailsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getCastsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}/credits?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getReviewsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}/reviews?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getSearchMovie = (query) => {\n    return fetch(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}"],"names":["casts","map","id","profile_path","original_name","name","character","src","alt","useState","setCasts","params","useParams","useEffect","getCastsMovie","movieId","then","cast","catch","error","console","status_message","length","BASE_URL","KEY","getTrendingMovies","movies","fetch","resp","ok","Error","json","getDetailsMovie","movieID","getReviewsMovie","getSearchMovie","query"],"sourceRoot":""}