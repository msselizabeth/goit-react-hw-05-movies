{"version":3,"file":"static/js/465.01eac1e7.chunk.js","mappings":"yJAcA,UAZoB,SAAC,GAAe,IAAdA,EAAa,EAAbA,QAEtB,OAAQ,wBACCA,EAAQC,KAAI,YAA6B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxB,OAAQ,2BACF,qCAAaD,MACb,uBAAIC,MAFOF,EAInB,KAER,C,mDCZgBG,EAAgBC,EAAQ,IAAjCC,QACR,EAAgCD,EAAQ,KAAhCE,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,EAAcJ,EAAQ,IAAtBI,UACAC,EAAoBL,EAAQ,KAA5BK,gBAuBR,UArBe,WACX,MAA8BH,EAAS,IAAvC,eAAOR,EAAP,KAAgBY,EAAhB,KACMC,EAASH,IASf,OANAD,GAAU,WACNE,EAAgBE,EAAOC,SAClBC,MAAK,SAAAC,GAAM,OAAIJ,EAAWI,EAAOC,QAAtB,IACfC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAME,eAAxB,GACf,GAAC,CAACR,EAAOC,WAGV,+BACsB,IAAnBd,EAAQsB,SACP,wEAEDtB,EAAQsB,OAAS,IAAK,SAACjB,EAAD,CAAaL,QAASA,MAGlD,C,8NCxBD,IAAMuB,EAAW,gCACXC,EAAM,mCAECC,EAAoB,SAACC,GAC9B,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,sCAA0CC,IACjDT,MAAK,SAAAa,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GAER,EAEYC,EAAkB,SAACC,GAC5B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,oBAAwCT,IAC/CT,MAAK,SAAAa,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYG,EAAgB,SAACD,GAC1B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,4BAAgDT,IACvDT,MAAK,SAAAa,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYpB,EAAkB,SAACsB,GAC5B,OAAON,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBU,EAArB,4BAAgDT,IACvDT,MAAK,SAAAa,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,EAEYI,EAAiB,SAACC,GAC3B,OAAOT,MAAM,GAAD,OAAIJ,EAAJ,gCAAoCC,EAApC,kBAAiDY,IACxDrB,MAAK,SAAAa,GACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKP,gBAEzB,OAAOO,EAAKG,MACf,GACR,C","sources":["components/ReviewsList/ReviewsList.js","pages/Review.js","services/MoviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ReviewsList = ({reviews}) => {\n\nreturn (<ul>\n        {reviews.map(({id, author, content }) => {\n           return( <li key={id}>\n                 <h3>Author: {author}</h3>\n                 <p>{content}</p>\n            </li>)\n        })}\n    </ul>)\n}\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      content: PropTypes.string,\n      author_details: PropTypes.object,\n    })\n  ).isRequired,\n};","const { default: ReviewsList } = require(\"components/ReviewsList/ReviewsList\");\nconst { useState, useEffect } = require(\"react\");\nconst { useParams } = require(\"react-router-dom\");\nconst { getReviewsMovie } = require(\"services/MoviesAPI\");\n\nconst Review = () => {\n    const [reviews, setReviews] = useState([]);\n    const params = useParams();\n\n\n    useEffect(() => {\n        getReviewsMovie(params.movieId)\n            .then(review => setReviews(review.results))\n        .catch(error => console.error(error.status_message))\n    },[params.movieId])\n\n    return (\n    <section>\n      {reviews.length === 0 && (\n        <strong>We dont have any reviews for this movie</strong>\n      )}\n      {reviews.length > 0 && <ReviewsList reviews={reviews} />}\n    </section>\n  );\n}\n\nexport default Review;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '9aeb3f25134c39d746b22e1322fdcd2c';\n\nexport const getTrendingMovies = (movies) => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n       \n}\n\nexport const getDetailsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getCastsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}/credits?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getReviewsMovie = (movieID) => {\n    return fetch(`${BASE_URL}movie/${movieID}/reviews?api_key=${KEY}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}\n\nexport const getSearchMovie = (query) => {\n    return fetch(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.status_message);\n            }\n            return resp.json();\n        })\n}"],"names":["reviews","map","id","author","content","ReviewsList","require","default","useState","useEffect","useParams","getReviewsMovie","setReviews","params","movieId","then","review","results","catch","error","console","status_message","length","BASE_URL","KEY","getTrendingMovies","movies","fetch","resp","ok","Error","json","getDetailsMovie","movieID","getCastsMovie","getSearchMovie","query"],"sourceRoot":""}